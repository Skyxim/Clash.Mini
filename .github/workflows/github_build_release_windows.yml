name: Build Release Windows
on:
  push:
    branches:
      - release
      - pre-release
  pull_request:
    branches:
      - release
      - pre-release
#    tags:
#      - 'v*.*.*'

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5

jobs:
  build-and-publish:
    name: Build & Publish (Pre)Release Windows
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      # Ëé∑ÂèñGit‰ø°ÊÅØ
      - name: Get Git Info üí°
        shell: pwsh
        run: |
          $VERSION_REGEXP='^v?\d+\.\d+\.\d+(\.\d+)?(-pre)?$'
          echo "VERSION_REGEXP=$VERSION_REGEXP" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace 'refs/heads/', ''
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"

          $SHORT_SHA=${env:GITHUB_SHA}.Substring(0,7)
          echo "SHORT_SHA=$SHORT_SHA" >> $env:GITHUB_ENV
          echo "Current commit hash id: ${env:GITHUB_SHA} ($SHORT_SHA)"

          $GIT_TAG_VERSION=git tag -l | where { $_ -match $VERSION_REGEXP } | sort -descending -top 1
          $GIT_TAG_PRE_VERSION=git tag -l | where { $_ -match $VERSION_REGEXP } | sort -descending -top 1
          if ($GIT_TAG_PRE_VERSION -eq $GIT_TAG_VERSION + '-pre') { $GIT_TAG_LATEST=$GIT_TAG_VERSION }
            else { $GIT_TAG_LATEST=@($GIT_TAG_VERSION, $GIT_TAG_PRE_VERSION) | sort -descending -top 1 }
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"

      # ÈÖçÁΩÆÊûÑÂª∫‰ø°ÊÅØ
      - name: Configurate Build Information üñ®
        if: success()
        shell: pwsh
        run: |
          $BUILD_PATH="$pwd\build"
          echo "BUILD_PATH=$BUILD_PATH" >> $env:GITHUB_ENV
          $BUILD_VERSION=cat .\versioninfo.json | jq -r '.StringFileInfo.ProductVersion'
          echo "BUILD_VERSION=$BUILD_VERSION" >> $env:GITHUB_ENV
          echo "Build Version: v$BUILD_VERSION"
          $GIT_TAG="v$BUILD_VERSION$(${env:GIT_BRANCH} -ne 'release' ? '-pre' : '')"
          echo "GIT_TAG=$GIT_TAG" >> $env:GITHUB_ENV
          echo "Current Tag: $GIT_TAG"

      # ÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Check on Failures ‚ùå
        if: success()
        shell: pwsh
        run: |
          $NOT_PASSED=0
          echo "Build Version: v${env:BUILD_VERSION}`nCurrent Tag: ${env:GIT_TAG}`nLatest Tag: ${env:GIT_TAG_LATEST}`n"
          if (!(${env:GIT_TAG} -match ${env:VERSION_REGEXP}) -or ${env:GIT_TAG} -eq '') {
            $NOT_PASSED=1
            echo "Cannot get the version information or it's incorrect."
          }

          if ($NOT_PASSED -eq 0) {
            $INTERNAL_VERSION_REGEXP='^(\d+\.\d+\.\d+)(\.\d+)?$'
            $fileVersion=cat .\versioninfo.json | jq -r '.FixedFileInfo.FileVersion'
            $fileVersion=(echo $fileVersion | jq -r '.Major, .Minor, .Patch, .Build') -join '.'
            $tmpVer=[regex]::Match($fileVersion, $INTERNAL_VERSION_REGEXP)
            if (!$tmpVer.success) {
              $NOT_PASSED=1
            } else {
              $fileVersion=$tmpVer.Groups[1].Value
              if ($tmpVer.Groups[2].Value -ne '.0') { $fileVersion+=$tmpVer.Groups[2].Value}
            }

            if ($NOT_PASSED -eq 0) {
              $productVersion=cat .\versioninfo.json | jq -r '.FixedFileInfo.ProductVersion'
              $productVersion=(echo $productVersion | jq -r '.Major, .Minor, .Patch, .Build') -join '.'
              $tmpVer=[regex]::Match($productVersion, $INTERNAL_VERSION_REGEXP)
              if (!$tmpVer.success) {
                $NOT_PASSED=1
              } else {
                $productVersion=$tmpVer.Groups[1].Value
                if ($tmpVer.Groups[2].Value -ne '.0') { $productVersion+=$tmpVer.Groups[2].Value}
              }
            }
          }

          if (($NOT_PASSED -eq 0) -and (($productVersion -ne $fileVersion) -or (${env:BUILD_VERSION} -ne $productVersion))) {
            $NOT_PASSED=1
            echo "The version information has some differences.`nPlease check `"versioninfo.json`""
          }

          if (($NOT_PASSED -eq 0) -and ((${env:GIT_TAG_LATEST} -ne '' -and ${env:GIT_TAG}.replace('-pre', '') -lt ${env:GIT_TAG_LATEST}.replace('-pre', '') -or
            (${env:GIT_TAG}.replace('-pre', '') -eq ${env:GIT_TAG_LATEST}.replace('-pre', '') -and (${env:GIT_TAG}.contains('-pre') -or !${env:GIT_TAG_LATEST}.contains('-pre')))))) {
              $NOT_PASSED=1
              echo "A newer or the current version already exists."
          }
          if ($NOT_PASSED -ne 0) {
            echo "Check the version information is not passed."
            echo "This build has been aborted."
            exit 1
          }

      # ÈÖçÁΩÆGolangÁéØÂ¢É
      - name: Setup Go Environment üìç
        uses: actions/setup-go@v2
        if: success()
        with:
          go-version: ${{ env.go-version }}
          stable: ${{ env.go-stable }}

      # Ëé∑Âèñ‰æùËµñÂåÖ
      - name: Get Go Modules üìü
        if: success()
        shell: pwsh
        run: |
          go version
          go env
          go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo
          go generate -x
          mkdir -p .\build

      # ËøêË°åGolangÊµãËØï
      #  - name: Golang Test ‚úÖ
      #      run: |

      # ÊûÑÂª∫64‰ΩçÂ∫îÁî®
      - name: Build x64 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          go build -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_x64.exe

      # ÊûÑÂª∫32‰ΩçÂ∫îÁî®
      - name: Build x86 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="386"
          go build -a -v -x -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_x86.exe

      # ÂáÜÂ§áÂèëÂ∏ÉPreReleaseÊñá‰ª∂
      - id: prepare-pre-release
        name: Prepare to Publish PreRelease üïπ
        if: ${{ env.GIT_BRANCH != 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p .\publish
          $BUILD_X64_FILENAME="Clash.Mini_${env:GIT_BRANCH}_v${env:BUILD_VERSION}_x64.exe"
          $BUILD_X86_FILENAME="Clash.Mini_${env:GIT_BRANCH}_v${env:BUILD_VERSION}_x86.exe"
          echo "BUILD_X64_FILENAME=$BUILD_X64_FILENAME" >> $env:GITHUB_ENV
          echo "BUILD_X86_FILENAME=$BUILD_X86_FILENAME" >> $env:GITHUB_ENV
          cp .\Clash.Mini_*.exe .\publish\
          echo "Ready to upload the following file(s):"
          ls .\publish

      # ‰∏ä‰º†64‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x64 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ‰∏ä‰º†32‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x86 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ÂáÜÂ§áÂèëÂ∏ÉReleaseÊñá‰ª∂
      - name: Prepare to Publish Release üïπ
        if: ${{ env.GIT_BRANCH == 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p .\publish
          cp .\Clash.Mini_*.exe .\publish\
          echo "Ready to upload the following file(s):"
          ls .\publish

      # ÂáÜÂ§áÂéãÁº©
      - name: Prepare to Compression üïπ
        if: success()
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p ($PUBLISH_PATH_X64="${env:BUILD_PATH}\publish\x64")
          mkdir -p ($PUBLISH_PATH_X86="${env:BUILD_PATH}\publish\x86")
          echo "PUBLISH_PATH_X64=$PUBLISH_PATH_X64" >> $env:GITHUB_ENV
          echo "PUBLISH_PATH_X86=$PUBLISH_PATH_X86" >> $env:GITHUB_ENV
          mkdir -p .\Profile
          $packageFiles=@(".\Profile", "..\config.yaml", "..\Country.mmdb")
          mv .\publish\Clash.Mini*64.exe $PUBLISH_PATH_X64\Clash.Mini.exe
          $filesX64=$packageFiles
          foreach ($file in $filesX64) { cp $file $PUBLISH_PATH_X64\ }
          mv .\publish\Clash.Mini*86.exe $PUBLISH_PATH_X86\Clash.Mini.exe
          $filesX86=$packageFiles
          foreach ($file in $filesX86) { cp $file $PUBLISH_PATH_X86\ }

      # ÂéãÁº©ÊâìÂåÖ
      - name: Compression x64 üì¶
        if: success()
        shell: pwsh
        run: |
          7z a -t7z -mx=9 ${env:BUILD_PATH}\publish\Clash.Mini.${{ env.GIT_TAG }}.x64.7z ${env:PUBLISH_PATH_X64}\*
          7z a -t7z -mx=9 ${env:BUILD_PATH}\publish\Clash.Mini.${{ env.GIT_TAG }}.x86.7z ${env:PUBLISH_PATH_X86}\*

      # ÂèëÂ∏ÉÂà∞Releases
      - name: Publish to Releases üí∏
        if: success()
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.GIT_BRANCH != 'release' }}
          tag: ${{ env.GIT_TAG }}
          artifacts: ${{ env.BUILD_PATH }}\publish\Clash.Mini*.7z
          #          bodyFile: .\CHANGELOG.md
          bodyFile: .\RELEASELOG.md
          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
